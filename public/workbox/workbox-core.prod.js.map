{"version":3,"file":"workbox-core.prod.js","sources":["../_version.js","../_private/logger.js","../models/messages/messageGenerator.js","../_private/WorkboxError.js","../_private/assert.js","../models/quotaErrorCallbacks.js","../_private/cacheNames.js","../_private/cacheMatchIgnoreParams.js","../_private/canConstructReadableStream.js","../_private/canConstructResponseFromBodyStream.js","../_private/DBWrapper.js","../_private/timeout.js","../_private/dontWaitFor.js","../_private/Deferred.js","../_private/deleteDatabase.js","../_private/executeQuotaErrorCallbacks.js","../_private/getFriendlyURL.js","../_private/resultingClientExists.js","../_private/waitUntil.js","../cacheNames.js","../clientsClaim.js","../copyResponse.js","../registerQuotaErrorCallback.js","../setCacheNameDetails.js","../skipWaiting.js"],"sourcesContent":["\"use strict\";\r\n// @ts-ignore\r\ntry {\r\n    self['workbox:core:6.1.5'] && _();\r\n}\r\ncatch (e) { }\r\n","/*\r\n  Copyright 2019 Google LLC\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nconst logger = (process.env.NODE_ENV === 'production' ? null : (() => {\r\n    // Don't overwrite this value if it's already set.\r\n    // See https://github.com/GoogleChrome/workbox/pull/2284#issuecomment-560470923\r\n    if (!('__WB_DISABLE_DEV_LOGS' in self)) {\r\n        self.__WB_DISABLE_DEV_LOGS = false;\r\n    }\r\n    let inGroup = false;\r\n    const methodToColorMap = {\r\n        debug: `#7f8c8d`,\r\n        log: `#2ecc71`,\r\n        warn: `#f39c12`,\r\n        error: `#c0392b`,\r\n        groupCollapsed: `#3498db`,\r\n        groupEnd: null,\r\n    };\r\n    const print = function (method, args) {\r\n        if (self.__WB_DISABLE_DEV_LOGS) {\r\n            return;\r\n        }\r\n        if (method === 'groupCollapsed') {\r\n            // Safari doesn't print all console.groupCollapsed() arguments:\r\n            // https://bugs.webkit.org/show_bug.cgi?id=182754\r\n            if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\r\n                console[method](...args);\r\n                return;\r\n            }\r\n        }\r\n        const styles = [\r\n            `background: ${methodToColorMap[method]}`,\r\n            `border-radius: 0.5em`,\r\n            `color: white`,\r\n            `font-weight: bold`,\r\n            `padding: 2px 0.5em`,\r\n        ];\r\n        // When in a group, the workbox prefix is not displayed.\r\n        const logPrefix = inGroup ? [] : ['%cworkbox', styles.join(';')];\r\n        console[method](...logPrefix, ...args);\r\n        if (method === 'groupCollapsed') {\r\n            inGroup = true;\r\n        }\r\n        if (method === 'groupEnd') {\r\n            inGroup = false;\r\n        }\r\n    };\r\n    const api = {};\r\n    const loggerMethods = Object.keys(methodToColorMap);\r\n    for (const key of loggerMethods) {\r\n        const method = key;\r\n        api[method] = (...args) => {\r\n            print(method, args);\r\n        };\r\n    }\r\n    return api;\r\n})());\r\nexport { logger };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { messages } from './messages.js';\r\nimport '../../_version.js';\r\nconst fallback = (code, ...args) => {\r\n    let msg = code;\r\n    if (args.length > 0) {\r\n        msg += ` :: ${JSON.stringify(args)}`;\r\n    }\r\n    return msg;\r\n};\r\nconst generatorFunction = (code, details = {}) => {\r\n    const message = messages[code];\r\n    if (!message) {\r\n        throw new Error(`Unable to find message for code '${code}'.`);\r\n    }\r\n    return message(details);\r\n};\r\nexport const messageGenerator = (process.env.NODE_ENV === 'production') ?\r\n    fallback : generatorFunction;\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { messageGenerator } from '../models/messages/messageGenerator.js';\r\nimport '../_version.js';\r\n/**\r\n * Workbox errors should be thrown with this class.\r\n * This allows use to ensure the type easily in tests,\r\n * helps developers identify errors from workbox\r\n * easily and allows use to optimise error\r\n * messages correctly.\r\n *\r\n * @private\r\n */\r\nclass WorkboxError extends Error {\r\n    /**\r\n     *\r\n     * @param {string} errorCode The error code that\r\n     * identifies this particular error.\r\n     * @param {Object=} details Any relevant arguments\r\n     * that will help developers identify issues should\r\n     * be added as a key on the context object.\r\n     */\r\n    constructor(errorCode, details) {\r\n        const message = messageGenerator(errorCode, details);\r\n        super(message);\r\n        this.name = errorCode;\r\n        this.details = details;\r\n    }\r\n}\r\nexport { WorkboxError };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { WorkboxError } from '../_private/WorkboxError.js';\r\nimport '../_version.js';\r\n/*\r\n * This method throws if the supplied value is not an array.\r\n * The destructed values are required to produce a meaningful error for users.\r\n * The destructed and restructured object is so it's clear what is\r\n * needed.\r\n */\r\nconst isArray = (value, details) => {\r\n    if (!Array.isArray(value)) {\r\n        throw new WorkboxError('not-an-array', details);\r\n    }\r\n};\r\nconst hasMethod = (object, expectedMethod, details) => {\r\n    const type = typeof object[expectedMethod];\r\n    if (type !== 'function') {\r\n        details['expectedMethod'] = expectedMethod;\r\n        throw new WorkboxError('missing-a-method', details);\r\n    }\r\n};\r\nconst isType = (object, expectedType, details) => {\r\n    if (typeof object !== expectedType) {\r\n        details['expectedType'] = expectedType;\r\n        throw new WorkboxError('incorrect-type', details);\r\n    }\r\n};\r\nconst isInstance = (object, expectedClass, details) => {\r\n    if (!(object instanceof expectedClass)) {\r\n        details['expectedClass'] = expectedClass;\r\n        throw new WorkboxError('incorrect-class', details);\r\n    }\r\n};\r\nconst isOneOf = (value, validValues, details) => {\r\n    if (!validValues.includes(value)) {\r\n        details['validValueDescription'] =\r\n            `Valid values are ${JSON.stringify(validValues)}.`;\r\n        throw new WorkboxError('invalid-value', details);\r\n    }\r\n};\r\nconst isArrayOfClass = (value, expectedClass, details) => {\r\n    const error = new WorkboxError('not-array-of-class', details);\r\n    if (!Array.isArray(value)) {\r\n        throw error;\r\n    }\r\n    for (const item of value) {\r\n        if (!(item instanceof expectedClass)) {\r\n            throw error;\r\n        }\r\n    }\r\n};\r\nconst finalAssertExports = process.env.NODE_ENV === 'production' ? null : {\r\n    hasMethod,\r\n    isArray,\r\n    isInstance,\r\n    isOneOf,\r\n    isType,\r\n    isArrayOfClass,\r\n};\r\nexport { finalAssertExports as assert };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n// Callbacks to be executed whenever there's a quota error.\r\nconst quotaErrorCallbacks = new Set();\r\nexport { quotaErrorCallbacks };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nconst _cacheNameDetails = {\r\n    googleAnalytics: 'googleAnalytics',\r\n    precache: 'precache-v2',\r\n    prefix: 'workbox',\r\n    runtime: 'runtime',\r\n    suffix: typeof registration !== 'undefined' ? registration.scope : '',\r\n};\r\nconst _createCacheName = (cacheName) => {\r\n    return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix]\r\n        .filter((value) => value && value.length > 0)\r\n        .join('-');\r\n};\r\nconst eachCacheNameDetail = (fn) => {\r\n    for (const key of Object.keys(_cacheNameDetails)) {\r\n        fn(key);\r\n    }\r\n};\r\nexport const cacheNames = {\r\n    updateDetails: (details) => {\r\n        eachCacheNameDetail((key) => {\r\n            if (typeof details[key] === 'string') {\r\n                _cacheNameDetails[key] = details[key];\r\n            }\r\n        });\r\n    },\r\n    getGoogleAnalyticsName: (userCacheName) => {\r\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\r\n    },\r\n    getPrecacheName: (userCacheName) => {\r\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\r\n    },\r\n    getPrefix: () => {\r\n        return _cacheNameDetails.prefix;\r\n    },\r\n    getRuntimeName: (userCacheName) => {\r\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\r\n    },\r\n    getSuffix: () => {\r\n        return _cacheNameDetails.suffix;\r\n    },\r\n};\r\n","/*\r\n  Copyright 2020 Google LLC\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nfunction stripParams(fullURL, ignoreParams) {\r\n    const strippedURL = new URL(fullURL);\r\n    for (const param of ignoreParams) {\r\n        strippedURL.searchParams.delete(param);\r\n    }\r\n    return strippedURL.href;\r\n}\r\n/**\r\n * Matches an item in the cache, ignoring specific URL params. This is similar\r\n * to the `ignoreSearch` option, but it allows you to ignore just specific\r\n * params (while continuing to match on the others).\r\n *\r\n * @private\r\n * @param {Cache} cache\r\n * @param {Request} request\r\n * @param {Object} matchOptions\r\n * @param {Array<string>} ignoreParams\r\n * @return {Promise<Response|undefined>}\r\n */\r\nasync function cacheMatchIgnoreParams(cache, request, ignoreParams, matchOptions) {\r\n    const strippedRequestURL = stripParams(request.url, ignoreParams);\r\n    // If the request doesn't include any ignored params, match as normal.\r\n    if (request.url === strippedRequestURL) {\r\n        return cache.match(request, matchOptions);\r\n    }\r\n    // Otherwise, match by comparing keys\r\n    const keysOptions = { ...matchOptions, ignoreSearch: true };\r\n    const cacheKeys = await cache.keys(request, keysOptions);\r\n    for (const cacheKey of cacheKeys) {\r\n        const strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\r\n        if (strippedRequestURL === strippedCacheKeyURL) {\r\n            return cache.match(cacheKey, matchOptions);\r\n        }\r\n    }\r\n    return;\r\n}\r\nexport { cacheMatchIgnoreParams };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nlet supportStatus;\r\n/**\r\n * A utility function that determines whether the current browser supports\r\n * constructing a [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/ReadableStream)\r\n * object.\r\n *\r\n * @return {boolean} `true`, if the current browser can successfully\r\n *     construct a `ReadableStream`, `false` otherwise.\r\n *\r\n * @private\r\n */\r\nfunction canConstructReadableStream() {\r\n    if (supportStatus === undefined) {\r\n        // See https://github.com/GoogleChrome/workbox/issues/1473\r\n        try {\r\n            new ReadableStream({ start() { } });\r\n            supportStatus = true;\r\n        }\r\n        catch (error) {\r\n            supportStatus = false;\r\n        }\r\n    }\r\n    return supportStatus;\r\n}\r\nexport { canConstructReadableStream };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nlet supportStatus;\r\n/**\r\n * A utility function that determines whether the current browser supports\r\n * constructing a new `Response` from a `response.body` stream.\r\n *\r\n * @return {boolean} `true`, if the current browser can successfully\r\n *     construct a `Response` from a `response.body` stream, `false` otherwise.\r\n *\r\n * @private\r\n */\r\nfunction canConstructResponseFromBodyStream() {\r\n    if (supportStatus === undefined) {\r\n        const testResponse = new Response('');\r\n        if ('body' in testResponse) {\r\n            try {\r\n                new Response(testResponse.body);\r\n                supportStatus = true;\r\n            }\r\n            catch (error) {\r\n                supportStatus = false;\r\n            }\r\n        }\r\n        supportStatus = false;\r\n    }\r\n    return supportStatus;\r\n}\r\nexport { canConstructResponseFromBodyStream };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n/**\r\n * A class that wraps common IndexedDB functionality in a promise-based API.\r\n * It exposes all the underlying power and functionality of IndexedDB, but\r\n * wraps the most commonly used features in a way that's much simpler to use.\r\n *\r\n * @private\r\n */\r\nexport class DBWrapper {\r\n    /**\r\n     * @param {string} name\r\n     * @param {number} version\r\n     * @param {Object=} [callback]\r\n     * @param {!Function} [callbacks.onupgradeneeded]\r\n     * @param {!Function} [callbacks.onversionchange] Defaults to\r\n     *     DBWrapper.prototype._onversionchange when not specified.\r\n     * @private\r\n     */\r\n    constructor(name, version, { onupgradeneeded, onversionchange, } = {}) {\r\n        this._db = null;\r\n        this._name = name;\r\n        this._version = version;\r\n        this._onupgradeneeded = onupgradeneeded;\r\n        this._onversionchange = onversionchange || (() => this.close());\r\n    }\r\n    /**\r\n     * Returns the IDBDatabase instance (not normally needed).\r\n     * @return {IDBDatabase|undefined}\r\n     *\r\n     * @private\r\n     */\r\n    get db() {\r\n        return this._db;\r\n    }\r\n    /**\r\n     * Opens a connected to an IDBDatabase, invokes any onupgradedneeded\r\n     * callback, and added an onversionchange callback to the database.\r\n     *\r\n     * @return {IDBDatabase}\r\n     * @private\r\n     */\r\n    async open() {\r\n        if (this._db)\r\n            return;\r\n        this._db = await new Promise((resolve, reject) => {\r\n            // This flag is flipped to true if the timeout callback runs prior\r\n            // to the request failing or succeeding. Note: we use a timeout instead\r\n            // of an onblocked handler since there are cases where onblocked will\r\n            // never never run. A timeout better handles all possible scenarios:\r\n            // https://github.com/w3c/IndexedDB/issues/223\r\n            let openRequestTimedOut = false;\r\n            setTimeout(() => {\r\n                openRequestTimedOut = true;\r\n                reject(new Error('The open request was blocked and timed out'));\r\n            }, this.OPEN_TIMEOUT);\r\n            const openRequest = indexedDB.open(this._name, this._version);\r\n            openRequest.onerror = () => reject(openRequest.error);\r\n            openRequest.onupgradeneeded = (evt) => {\r\n                if (openRequestTimedOut) {\r\n                    openRequest.transaction.abort();\r\n                    openRequest.result.close();\r\n                }\r\n                else if (typeof this._onupgradeneeded === 'function') {\r\n                    this._onupgradeneeded(evt);\r\n                }\r\n            };\r\n            openRequest.onsuccess = () => {\r\n                const db = openRequest.result;\r\n                if (openRequestTimedOut) {\r\n                    db.close();\r\n                }\r\n                else {\r\n                    db.onversionchange = this._onversionchange.bind(this);\r\n                    resolve(db);\r\n                }\r\n            };\r\n        });\r\n        return this;\r\n    }\r\n    /**\r\n     * Polyfills the native `getKey()` method. Note, this is overridden at\r\n     * runtime if the browser supports the native method.\r\n     *\r\n     * @param {string} storeName\r\n     * @param {*} query\r\n     * @return {Array}\r\n     * @private\r\n     */\r\n    async getKey(storeName, query) {\r\n        return (await this.getAllKeys(storeName, query, 1))[0];\r\n    }\r\n    /**\r\n     * Polyfills the native `getAll()` method. Note, this is overridden at\r\n     * runtime if the browser supports the native method.\r\n     *\r\n     * @param {string} storeName\r\n     * @param {*} query\r\n     * @param {number} count\r\n     * @return {Array}\r\n     * @private\r\n     */\r\n    async getAll(storeName, query, count) {\r\n        return await this.getAllMatching(storeName, { query, count });\r\n    }\r\n    /**\r\n     * Polyfills the native `getAllKeys()` method. Note, this is overridden at\r\n     * runtime if the browser supports the native method.\r\n     *\r\n     * @param {string} storeName\r\n     * @param {*} query\r\n     * @param {number} count\r\n     * @return {Array}\r\n     * @private\r\n     */\r\n    async getAllKeys(storeName, query, count) {\r\n        const entries = await this.getAllMatching(storeName, { query, count, includeKeys: true });\r\n        return entries.map((entry) => entry.key);\r\n    }\r\n    /**\r\n     * Supports flexible lookup in an object store by specifying an index,\r\n     * query, direction, and count. This method returns an array of objects\r\n     * with the signature .\r\n     *\r\n     * @param {string} storeName\r\n     * @param {Object} [opts]\r\n     * @param {string} [opts.index] The index to use (if specified).\r\n     * @param {*} [opts.query]\r\n     * @param {IDBCursorDirection} [opts.direction]\r\n     * @param {number} [opts.count] The max number of results to return.\r\n     * @param {boolean} [opts.includeKeys] When true, the structure of the\r\n     *     returned objects is changed from an array of values to an array of\r\n     *     objects in the form {key, primaryKey, value}.\r\n     * @return {Array}\r\n     * @private\r\n     */\r\n    async getAllMatching(storeName, { index, query = null, // IE/Edge errors if query === `undefined`.\r\n    direction = 'next', count, includeKeys = false, } = {}) {\r\n        return await this.transaction([storeName], 'readonly', (txn, done) => {\r\n            const store = txn.objectStore(storeName);\r\n            const target = index ? store.index(index) : store;\r\n            const results = [];\r\n            const request = target.openCursor(query, direction);\r\n            request.onsuccess = () => {\r\n                const cursor = request.result;\r\n                if (cursor) {\r\n                    results.push(includeKeys ? cursor : cursor.value);\r\n                    if (count && results.length >= count) {\r\n                        done(results);\r\n                    }\r\n                    else {\r\n                        cursor.continue();\r\n                    }\r\n                }\r\n                else {\r\n                    done(results);\r\n                }\r\n            };\r\n        });\r\n    }\r\n    /**\r\n     * Accepts a list of stores, a transaction type, and a callback and\r\n     * performs a transaction. A promise is returned that resolves to whatever\r\n     * value the callback chooses. The callback holds all the transaction logic\r\n     * and is invoked with two arguments:\r\n     *   1. The IDBTransaction object\r\n     *   2. A `done` function, that's used to resolve the promise when\r\n     *      when the transaction is done, if passed a value, the promise is\r\n     *      resolved to that value.\r\n     *\r\n     * @param {Array<string>} storeNames An array of object store names\r\n     *     involved in the transaction.\r\n     * @param {string} type Can be `readonly` or `readwrite`.\r\n     * @param {!Function} callback\r\n     * @return {*} The result of the transaction ran by the callback.\r\n     * @private\r\n     */\r\n    async transaction(storeNames, type, callback) {\r\n        await this.open();\r\n        return await new Promise((resolve, reject) => {\r\n            const txn = this._db.transaction(storeNames, type);\r\n            txn.onabort = () => reject(txn.error);\r\n            txn.oncomplete = () => resolve();\r\n            callback(txn, (value) => resolve(value));\r\n        });\r\n    }\r\n    /**\r\n     * Delegates async to a native IDBObjectStore method.\r\n     *\r\n     * @param {string} method The method name.\r\n     * @param {string} storeName The object store name.\r\n     * @param {string} type Can be `readonly` or `readwrite`.\r\n     * @param {...*} args The list of args to pass to the native method.\r\n     * @return {*} The result of the transaction.\r\n     * @private\r\n     */\r\n    async _call(method, storeName, type, ...args) {\r\n        const callback = (txn, done) => {\r\n            const objStore = txn.objectStore(storeName);\r\n            // TODO(philipwalton): Fix this underlying TS2684 error.\r\n            // @ts-ignore\r\n            const request = objStore[method].apply(objStore, args);\r\n            request.onsuccess = () => done(request.result);\r\n        };\r\n        return await this.transaction([storeName], type, callback);\r\n    }\r\n    /**\r\n     * Closes the connection opened by `DBWrapper.open()`. Generally this method\r\n     * doesn't need to be called since:\r\n     *   1. It's usually better to keep a connection open since opening\r\n     *      a new connection is somewhat slow.\r\n     *   2. Connections are automatically closed when the reference is\r\n     *      garbage collected.\r\n     * The primary use case for needing to close a connection is when another\r\n     * reference (typically in another tab) needs to upgrade it and would be\r\n     * blocked by the current, open connection.\r\n     *\r\n     * @private\r\n     */\r\n    close() {\r\n        if (this._db) {\r\n            this._db.close();\r\n            this._db = null;\r\n        }\r\n    }\r\n}\r\n// Exposed on the prototype to let users modify the default timeout on a\r\n// per-instance or global basis.\r\nDBWrapper.prototype.OPEN_TIMEOUT = 2000;\r\n// Wrap native IDBObjectStore methods according to their mode.\r\nconst methodsToWrap = {\r\n    readonly: ['get', 'count', 'getKey', 'getAll', 'getAllKeys'],\r\n    readwrite: ['add', 'put', 'clear', 'delete'],\r\n};\r\nfor (const [mode, methods] of Object.entries(methodsToWrap)) {\r\n    for (const method of methods) {\r\n        if (method in IDBObjectStore.prototype) {\r\n            // Don't use arrow functions here since we're outside of the class.\r\n            DBWrapper.prototype[method] =\r\n                async function (storeName, ...args) {\r\n                    return await this._call(method, storeName, mode, ...args);\r\n                };\r\n        }\r\n    }\r\n}\r\n","/*\r\n  Copyright 2019 Google LLC\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n/**\r\n * Returns a promise that resolves and the passed number of milliseconds.\r\n * This utility is an async/await-friendly version of `setTimeout`.\r\n *\r\n * @param {number} ms\r\n * @return {Promise}\r\n * @private\r\n */\r\nexport function timeout(ms) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n","/*\r\n  Copyright 2019 Google LLC\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n/**\r\n * A helper function that prevents a promise from being flagged as unused.\r\n *\r\n * @private\r\n **/\r\nexport function dontWaitFor(promise) {\r\n    // Effective no-op.\r\n    promise.then(() => { });\r\n}\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n/**\r\n * The Deferred class composes Promises in a way that allows for them to be\r\n * resolved or rejected from outside the constructor. In most cases promises\r\n * should be used directly, but Deferreds can be necessary when the logic to\r\n * resolve a promise must be separate.\r\n *\r\n * @private\r\n */\r\nclass Deferred {\r\n    /**\r\n     * Creates a promise and exposes its resolve and reject functions as methods.\r\n     */\r\n    constructor() {\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this.resolve = resolve;\r\n            this.reject = reject;\r\n        });\r\n    }\r\n}\r\nexport { Deferred };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n/**\r\n * Deletes the database.\r\n * Note: this is exported separately from the DBWrapper module because most\r\n * usages of IndexedDB in workbox dont need deleting, and this way it can be\r\n * reused in tests to delete databases without creating DBWrapper instances.\r\n *\r\n * @param {string} name The database name.\r\n * @private\r\n */\r\nexport const deleteDatabase = async (name) => {\r\n    await new Promise((resolve, reject) => {\r\n        const request = indexedDB.deleteDatabase(name);\r\n        request.onerror = () => {\r\n            reject(request.error);\r\n        };\r\n        request.onblocked = () => {\r\n            reject(new Error('Delete blocked'));\r\n        };\r\n        request.onsuccess = () => {\r\n            resolve();\r\n        };\r\n    });\r\n};\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { logger } from '../_private/logger.js';\r\nimport { quotaErrorCallbacks } from '../models/quotaErrorCallbacks.js';\r\nimport '../_version.js';\r\n/**\r\n * Runs all of the callback functions, one at a time sequentially, in the order\r\n * in which they were registered.\r\n *\r\n * @memberof module:workbox-core\r\n * @private\r\n */\r\nasync function executeQuotaErrorCallbacks() {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        logger.log(`About to run ${quotaErrorCallbacks.size} ` +\r\n            `callbacks to clean up caches.`);\r\n    }\r\n    for (const callback of quotaErrorCallbacks) {\r\n        await callback();\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.log(callback, 'is complete.');\r\n        }\r\n    }\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        logger.log('Finished running callbacks.');\r\n    }\r\n}\r\nexport { executeQuotaErrorCallbacks };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nconst getFriendlyURL = (url) => {\r\n    const urlObj = new URL(String(url), location.href);\r\n    // See https://github.com/GoogleChrome/workbox/issues/2323\r\n    // We want to include everything, except for the origin if it's same-origin.\r\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), '');\r\n};\r\nexport { getFriendlyURL };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { timeout } from './timeout.js';\r\nimport '../_version.js';\r\nconst MAX_RETRY_TIME = 2000;\r\n/**\r\n * Returns a promise that resolves to a window client matching the passed\r\n * `resultingClientId`. For browsers that don't support `resultingClientId`\r\n * or if waiting for the resulting client to apper takes too long, resolve to\r\n * `undefined`.\r\n *\r\n * @param {string} [resultingClientId]\r\n * @return {Promise<Client|undefined>}\r\n * @private\r\n */\r\nexport async function resultingClientExists(resultingClientId) {\r\n    if (!resultingClientId) {\r\n        return;\r\n    }\r\n    let existingWindows = await self.clients.matchAll({ type: 'window' });\r\n    const existingWindowIds = new Set(existingWindows.map((w) => w.id));\r\n    let resultingWindow;\r\n    const startTime = performance.now();\r\n    // Only wait up to `MAX_RETRY_TIME` to find a matching client.\r\n    while (performance.now() - startTime < MAX_RETRY_TIME) {\r\n        existingWindows = await self.clients.matchAll({ type: 'window' });\r\n        resultingWindow = existingWindows.find((w) => {\r\n            if (resultingClientId) {\r\n                // If we have a `resultingClientId`, we can match on that.\r\n                return w.id === resultingClientId;\r\n            }\r\n            else {\r\n                // Otherwise match on finding a window not in `existingWindowIds`.\r\n                return !existingWindowIds.has(w.id);\r\n            }\r\n        });\r\n        if (resultingWindow) {\r\n            break;\r\n        }\r\n        // Sleep for 100ms and retry.\r\n        await timeout(100);\r\n    }\r\n    return resultingWindow;\r\n}\r\n","/*\r\n  Copyright 2020 Google LLC\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n/**\r\n * A utility method that makes it easier to use `event.waitUntil` with\r\n * async functions and return the result.\r\n *\r\n * @param {ExtendableEvent} event\r\n * @param {Function} asyncFn\r\n * @return {Function}\r\n * @private\r\n */\r\nfunction waitUntil(event, asyncFn) {\r\n    const returnPromise = asyncFn();\r\n    event.waitUntil(returnPromise);\r\n    return returnPromise;\r\n}\r\nexport { waitUntil };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { cacheNames as _cacheNames } from './_private/cacheNames.js';\r\nimport './_version.js';\r\n/**\r\n * Get the current cache names and prefix/suffix used by Workbox.\r\n *\r\n * `cacheNames.precache` is used for precached assets,\r\n * `cacheNames.googleAnalytics` is used by `workbox-google-analytics` to\r\n * store `analytics.js`, and `cacheNames.runtime` is used for everything else.\r\n *\r\n * `cacheNames.prefix` can be used to retrieve just the current prefix value.\r\n * `cacheNames.suffix` can be used to retrieve just the current suffix value.\r\n *\r\n * @return {Object} An object with `precache`, `runtime`, `prefix`, and\r\n *     `googleAnalytics` properties.\r\n *\r\n * @memberof module:workbox-core\r\n */\r\nconst cacheNames = {\r\n    get googleAnalytics() {\r\n        return _cacheNames.getGoogleAnalyticsName();\r\n    },\r\n    get precache() {\r\n        return _cacheNames.getPrecacheName();\r\n    },\r\n    get prefix() {\r\n        return _cacheNames.getPrefix();\r\n    },\r\n    get runtime() {\r\n        return _cacheNames.getRuntimeName();\r\n    },\r\n    get suffix() {\r\n        return _cacheNames.getSuffix();\r\n    },\r\n};\r\nexport { cacheNames };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport './_version.js';\r\n/**\r\n * Claim any currently available clients once the service worker\r\n * becomes active. This is normally used in conjunction with `skipWaiting()`.\r\n *\r\n * @memberof module:workbox-core\r\n */\r\nfunction clientsClaim() {\r\n    self.addEventListener('activate', () => self.clients.claim());\r\n}\r\nexport { clientsClaim };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { canConstructResponseFromBodyStream } from './_private/canConstructResponseFromBodyStream.js';\r\nimport { WorkboxError } from './_private/WorkboxError.js';\r\nimport './_version.js';\r\n/**\r\n * Allows developers to copy a response and modify its `headers`, `status`,\r\n * or `statusText` values (the values settable via a\r\n * [`ResponseInit`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax}\r\n * object in the constructor).\r\n * To modify these values, pass a function as the second argument. That\r\n * function will be invoked with a single object with the response properties\r\n * `{headers, status, statusText}`. The return value of this function will\r\n * be used as the `ResponseInit` for the new `Response`. To change the values\r\n * either modify the passed parameter(s) and return it, or return a totally\r\n * new object.\r\n *\r\n * This method is intentionally limited to same-origin responses, regardless of\r\n * whether CORS was used or not.\r\n *\r\n * @param {Response} response\r\n * @param {Function} modifier\r\n * @memberof module:workbox-core\r\n */\r\nasync function copyResponse(response, modifier) {\r\n    let origin = null;\r\n    // If response.url isn't set, assume it's cross-origin and keep origin null.\r\n    if (response.url) {\r\n        const responseURL = new URL(response.url);\r\n        origin = responseURL.origin;\r\n    }\r\n    if (origin !== self.location.origin) {\r\n        throw new WorkboxError('cross-origin-copy-response', { origin });\r\n    }\r\n    const clonedResponse = response.clone();\r\n    // Create a fresh `ResponseInit` object by cloning the headers.\r\n    const responseInit = {\r\n        headers: new Headers(clonedResponse.headers),\r\n        status: clonedResponse.status,\r\n        statusText: clonedResponse.statusText,\r\n    };\r\n    // Apply any user modifications.\r\n    const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit;\r\n    // Create the new response from the body stream and `ResponseInit`\r\n    // modifications. Note: not all browsers support the Response.body stream,\r\n    // so fall back to reading the entire body into memory as a blob.\r\n    const body = canConstructResponseFromBodyStream() ?\r\n        clonedResponse.body : await clonedResponse.blob();\r\n    return new Response(body, modifiedResponseInit);\r\n}\r\nexport { copyResponse };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { logger } from './_private/logger.js';\r\nimport { assert } from './_private/assert.js';\r\nimport { quotaErrorCallbacks } from './models/quotaErrorCallbacks.js';\r\nimport './_version.js';\r\n/**\r\n * Adds a function to the set of quotaErrorCallbacks that will be executed if\r\n * there's a quota error.\r\n *\r\n * @param {Function} callback\r\n * @memberof module:workbox-core\r\n */\r\nfunction registerQuotaErrorCallback(callback) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        assert.isType(callback, 'function', {\r\n            moduleName: 'workbox-core',\r\n            funcName: 'register',\r\n            paramName: 'callback',\r\n        });\r\n    }\r\n    quotaErrorCallbacks.add(callback);\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        logger.log('Registered a callback to respond to quota errors.', callback);\r\n    }\r\n}\r\nexport { registerQuotaErrorCallback };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from './_private/assert.js';\r\nimport { cacheNames } from './_private/cacheNames.js';\r\nimport { WorkboxError } from './_private/WorkboxError.js';\r\nimport './_version.js';\r\n/**\r\n * Modifies the default cache names used by the Workbox packages.\r\n * Cache names are generated as `<prefix>-<Cache Name>-<suffix>`.\r\n *\r\n * @param {Object} details\r\n * @param {Object} [details.prefix] The string to add to the beginning of\r\n *     the precache and runtime cache names.\r\n * @param {Object} [details.suffix] The string to add to the end of\r\n *     the precache and runtime cache names.\r\n * @param {Object} [details.precache] The cache name to use for precache\r\n *     caching.\r\n * @param {Object} [details.runtime] The cache name to use for runtime caching.\r\n * @param {Object} [details.googleAnalytics] The cache name to use for\r\n *     `workbox-google-analytics` caching.\r\n *\r\n * @memberof module:workbox-core\r\n */\r\nfunction setCacheNameDetails(details) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        Object.keys(details).forEach((key) => {\r\n            assert.isType(details[key], 'string', {\r\n                moduleName: 'workbox-core',\r\n                funcName: 'setCacheNameDetails',\r\n                paramName: `details.${key}`,\r\n            });\r\n        });\r\n        if ('precache' in details && details['precache'].length === 0) {\r\n            throw new WorkboxError('invalid-cache-name', {\r\n                cacheNameId: 'precache',\r\n                value: details['precache'],\r\n            });\r\n        }\r\n        if ('runtime' in details && details['runtime'].length === 0) {\r\n            throw new WorkboxError('invalid-cache-name', {\r\n                cacheNameId: 'runtime',\r\n                value: details['runtime'],\r\n            });\r\n        }\r\n        if ('googleAnalytics' in details && details['googleAnalytics'].length === 0) {\r\n            throw new WorkboxError('invalid-cache-name', {\r\n                cacheNameId: 'googleAnalytics',\r\n                value: details['googleAnalytics'],\r\n            });\r\n        }\r\n    }\r\n    cacheNames.updateDetails(details);\r\n}\r\nexport { setCacheNameDetails };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { logger } from './_private/logger.js';\r\nimport './_version.js';\r\n/**\r\n * This method is deprecated, and will be removed in Workbox v7.\r\n *\r\n * Calling self.skipWaiting() is equivalent, and should be used instead.\r\n *\r\n * @memberof module:workbox-core\r\n */\r\nfunction skipWaiting() {\r\n    // Just call self.skipWaiting() directly.\r\n    // See https://github.com/GoogleChrome/workbox/issues/2525\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        logger.warn(`skipWaiting() from workbox-core is no longer recommended ` +\r\n            `and will be removed in Workbox v7. Using self.skipWaiting() instead ` +\r\n            `is equivalent.`);\r\n    }\r\n    self.skipWaiting();\r\n}\r\nexport { skipWaiting };\r\n"],"names":["self","_","e","messageGenerator","code","args","msg","length","JSON","stringify","WorkboxError","Error","constructor","errorCode","details","name","quotaErrorCallbacks","Set","_cacheNameDetails","googleAnalytics","precache","prefix","runtime","suffix","registration","scope","_createCacheName","cacheName","filter","value","join","cacheNames","updateDetails","fn","key","Object","keys","eachCacheNameDetail","getGoogleAnalyticsName","userCacheName","getPrecacheName","getPrefix","getRuntimeName","getSuffix","stripParams","fullURL","ignoreParams","strippedURL","URL","param","searchParams","delete","href","supportStatus","canConstructResponseFromBodyStream","undefined","testResponse","Response","body","error","DBWrapper","version","onupgradeneeded","onversionchange","_db","_name","_version","_onupgradeneeded","_onversionchange","this","close","Promise","resolve","reject","openRequestTimedOut","setTimeout","OPEN_TIMEOUT","openRequest","indexedDB","open","onerror","evt","transaction","abort","result","onsuccess","db","bind","storeName","query","getAllKeys","count","getAllMatching","includeKeys","map","entry","index","direction","txn","done","store","objectStore","target","results","request","openCursor","cursor","push","continue","storeNames","type","callback","onabort","oncomplete","method","objStore","apply","prototype","methodsToWrap","readonly","readwrite","mode","methods","entries","IDBObjectStore","async","_call","timeout","ms","cache","matchOptions","strippedRequestURL","url","match","keysOptions","ignoreSearch","cacheKeys","cacheKey","ReadableStream","start","promise","then","deleteDatabase","onblocked","String","location","replace","RegExp","origin","resultingClientId","existingWindows","clients","matchAll","existingWindowIds","w","id","resultingWindow","startTime","performance","now","find","has","event","asyncFn","returnPromise","waitUntil","_cacheNames","addEventListener","claim","response","modifier","clonedResponse","clone","responseInit","headers","Headers","status","statusText","modifiedResponseInit","blob","add","skipWaiting"],"mappings":"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"}